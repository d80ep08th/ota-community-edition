
// TODO: This needs to come from somewehre? Are we using this at all?
envPrefix=""

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  log-config-on-start = off

  http.host-connection-pool {
    # The maximum number of parallel connections that a connection pool to a
    # single host endpoint is allowed to establish. Must be greater than zero.
    max-connections = 2048
    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
    # Note that with N concurrent materializations the max number of open request in the pool
    # will never exceed N * max-connections * pipelining-limit.
    # Must be a power of 2 and > 0!
    max-open-requests = 8192

    idle-timeout = 30s
  }

  http {
    server {
      max-connections = 1024
      backlog = 2000

      // Akka HTTP default value
      idle-timeout = 60 s

      // TODO: Might be a problem for some services used by the client (director, treehub?)
      // turn off automatic HEAD->GET conversion, otherwise `head` routes get ignored
      transparent-head-requests = false
    }
  }

  actor.deployment {
    "/usage-router/*" {
      dispatcher = ats.blocking-io-dispatcher
    }
  }
}


ats {
  blocking-io-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 32
    }
    throughput = 1
  }

  metricsReporter {
    reportMetrics = true
  }

  ota-lith {
    db.default_host = "localhost"
    http.default_client_host = "localhost"
  }

  database {
    migrate = true
    asyncMigrations = true
    skipMigrationCheck = true

    // TODO: Needs to be scoped to service?
    encryption {
      salt = ""
      password = ""
    }
  }

  auth {
    protocol = "oauth.accesstoken" # or none
    verification = "local" # three options: none, local, auth-plus
    token {
      secret = "AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
    }
  }

  authplus {
    api.host = "localhost"
    api.port = 9001
    api.scheme = "http"
    api.uri = ${ats.authplus.api.scheme}"://"${ats.authplus.api.host}":"${ats.authplus.api.port}
    client{
      id = ""
      secret = ""
    }
  }

  reposerver {
    http {
      server = {
        host = "0.0.0.0"
        port = 7100

        # add some extra bytes for headers
        sizeLimit = 536872000 // > 512Mb
        uploadRequestTimeout = ${akka.http.server.request-timeout}
      }

      client {
        keyserver {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7200
        }
      }
    }

    database {
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://"${ats.ota-lith.db.default_host}":3306/tuf_repo"
      properties {
        user = "tuf_repo"
        password = "tuf_repo"
        sessionVariables = "net_write_timeout=10000"
      }
      numThreads = 20
      poolName = "reposerver-pool"
      queueSize = 1000
      registerMbeans = true
      flyway.locations = [ "db/migration/reposerver" ]
    }

    storage {
      type = "s3"
      localStorageRoot = "/tmp/tuf-reposerver-targets/objects"
      outOfBandUploadLimit = "3GB"

      s3 {
        accessKey = ${?TUF_REPOSERVER_AWS_ACCESS_KEY}
        secretKey = ${?TUF_REPOSERVER_AWS_SECRET_KEY}
        bucketId = ${?TUF_REPOSERVER_AWS_BUCKET_ID}
        region = "eu-central-1"
        region = ${?TUF_REPOSERVER_AWS_REGION}
      }

      azure {
        // Connection string to connect to blob storage service
        connectionString = ${?AZURE_CONNECTION_STRING}
        signatureTtl = 30m
        signatureTtl = ${?AZURE_SIGNATURE_TTL}
      }
    }
  }

  keyserver {
    http.server {
      host = "0.0.0.0"
      port = 7200
    }

    database = {
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://"${ats.ota-lith.db.default_host}":3306/tuf_keyserver"
      properties {
        user = "tuf_keyserver"
        password = "tuf_keyserver"
        sessionVariables = "net_write_timeout=10000"
      }
      numThreads = 20
      queueSize = 1000
      poolName = "keyserver-pool"
      registerMbeans = true
      flyway.locations = [ "db/migration/keyserver" ]
    }
  }

  director {
    allowEcuReplacement = true
    requestLogLevel = "info"

    http = {
      server = {
        host = "0.0.0.0"
        port = 7300
      }

      client = {
        keyserver {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7200
        }
      }
    }

    database = {
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://"${ats.ota-lith.db.default_host}":3306/director_v2"
      properties {
        user = "director_v2"
        password = "director_v2"
        rewriteBatchedStatements=true
      }
      numThreads = 20
      queueSize = 1000
      poolName = "director-pool"
      registerMbeans = true
      flyway.locations = [ "db/migration/director" ]
    }
  }

  treehub = {
    http {
      server = {
        host = "0.0.0.0"
        port = 7400
        treehubUri = "http://"${ats.treehub.http.server.host}":"${ats.treehub.http.server.port}
      }

      client = {
        device_registry = {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7500
        }
      }
    }

    database = {
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://"${ats.ota-lith.db.default_host}":3306/ota_treehub"
      url = ${?DB_URL}
      properties {
        user = "treehub"
        password = "treehub"
      }
      numThreads = 20
      queueSize = 1000
      registerMbeans = true
      poolName = "treehub-pool"
      flyway.locations = [ "db/migration/treehub" ]
    }

    storage {
      type = "s3" // or local

      staleObjectsExpireAfter = 1 hour

      local = {
        path = "/tmp/treehub"
      }

      s3 = {
        accessKey = ""
        secretKey = ""
        bucketId = ""
        region = "eu-central-1"
        allowRedirects = false
        endpointUrl = ""
      }
    }
  }

  deviceregistry = {
    http {
      server = {
        host = "0.0.0.0"
        port = 7500
      }

      client = {
        director = {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7300
        }
      }
    }

    database {
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://"${ats.ota-lith.db.default_host}":3306/device_registry"
      url = ${?DB_URL}
      properties {
        user = "device_registry"
        password = "device_registry"
      }
      numThreads = 20
      queueSize = 1000
      connectionTimeout = 1s
      validationTimeout = 1s
      poolName = "deviceregistry-pool"
      flyway.locations = [ "db/migration/deviceregistry" ]
    }
  }

  campaigner = {
    database = {
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://"${ats.ota-lith.db.default_host}":3306/campaigner"
      properties {
        user = "campaigner"
        password = "campaigner"
      }
      numThreads = 10
      registerMbeans = true
      poolName = "campaigner-pool"
      flyway.locations = [ "db/migration/campaigner" ]
    }

    http = {
      server = {
        host = "0.0.0.0"
        port = 7600
      }

      client = {
        deviceregistry = {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7500
        }

        director = {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7300
        }

        userprofile = {
          host = ${ats.ota-lith.http.default_client_host}
          port = 8085
        }
      }
    }
  }

  user_profile = {

    database = {
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://"${ats.ota-lith.db.default_host}":3306/user_profile"
      properties {
        user = "user_profile"
        password = "user_profile"
      }
      numThreads = 10
      registerMbeans = true
      poolName = "userprofile-pool"
      flyway.locations = [ "db/migration/user_profile" ]
    }

    http {
      server = {
        host = "0.0.0.0"
        port = 7700
      }

      client = {
        director {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7300
        }

        crypt {
          host = ${ats.ota-lith.http.default_client_host}
          port = 1000
        }

        reposerver {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7100
        }

        keyserver = {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7200
        }
      }
    }

    // These URIs are only needed to be put in the credentials.zip, so it seems better to keep them apart.
    credentials = {
      device_gateway {
        public = {
          port = 8000
        }
      }

      api_gateway = {
        public = {
          host = "API_GATEWAY_HOST_PUB"
          port = "API_GATEWAY_PORT_PUB"
        }
      }

      treehub = {
        public = {
          host = "TREEHUB_HOST_PUB"
          port = "TREEHUB_PORT_PUB"
        }
      }

      reposerver {
        public = {
          host = "TUF_REPOSERVER_HOST_PUB"
          port = "TUF_REPOSERVER_PORT_PUB"
        }
      }
    }

    aws {
      region = "eu-west-1"
      access_key_id = "aws-access-key-id"
      access_key_secret = "this-is-not-the-secret-you-are-looking-for"
      cognito {
        host = "ota-dev.auth.eu-west-1.amazoncognito.com"
        user_pool = "eu-west-1_XXXXXXXXXX"
      }
    }
  }

  api_provider = {
    http {
      server = {
        host = "0.0.0.0"
        port = 7800
      }

      client = {
        director = {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7300
        }

        deviceRegistry = {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7500
        }

        reposerver = {
          host = ${ats.ota-lith.http.default_client_host}
          port = 7100
        }
      }
    }
  }
}
